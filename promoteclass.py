# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'promoteclass.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QStyledItemDelegate
import retrieve,mysql.connector,dialogpromo,head,retrieve,promote
from mysql.connector import Error
class Ui_promoteclass(QtWidgets.QWidget):
    def backing(self):
        self.window=QtWidgets.QMainWindow()
        self.ui=promote.Ui_promote()
        self.ui.setupUi(self.window)
        self.window.show()
        self.promoteclass.hide() 
    def inchange(self):
        self.invalid_2.setText("")
    def eventFilter(self,source,event):
        index=source.currentIndex()
        if event.type()==QtCore.QEvent.KeyPress:
            if event.key()==QtCore.Qt.Key_Tab:
                if index.column()==8:
                    source.setCurrentCell(index.row()+1,8)
                    return True
                else:
                    return False
            elif event.key()==QtCore.Qt.Key_Backtab:
                if index.column()==8:
                    source.setCurrentCell(index.row()-1,8)
                    return True
                else:
                    return False
        elif index.column()!=8:
                source.setCurrentCell(index.row(),8)
                return True
        
        return super(Ui_promoteclass, self).eventFilter(source,event)
        
    def deleteforpromote(self):
        for i in range(self.tableView1.rowCount()):    
            qq=retrieve.result10
            ww=qq[i]
            ee=ww[0]
            retrieve.readBlobData(ee)
            ctr=retrieve.cteach
            adi=retrieve.admis
            dateofbirth=retrieve.dob
            roll=retrieve.r
            name=retrieve.n
            clas=retrieve.c
            div=retrieve.d
            pic=retrieve.po
            phone=retrieve.pe
            email=retrieve.e
            address=retrieve.a
            head.adddeleted(adi,pic,name,dateofbirth,clas,ctr,div,roll,phone,email,address)
            head.deletedetails(adi)
    def clearing(self):
        for i in range(self.tableView1.rowCount()):
            item4=""
            self.tableView1.setItem(i,8,QtWidgets.QTableWidgetItem(item4))
    def testtest(self):#checking for errors in the input
        classtoprocheck=[]
        divisionprocheck=[]
        alltopro=[]
        cteacher3=[]
        for i in range(self.tableView1.rowCount()):    
                    classtopro=self.tableView1.item(i, 7).text()
                    divisionpro=self.tableView1.item(i, 8).text()
                    divisionprocheck.append(divisionpro)
                    alltopro.append([classtopro,divisionpro])#---------------------                            
                    if classtopro=="" or divisionpro=="":
                        a3="All fields are mandatory"
                        return a3
        yu=1       
        for i in alltopro:
            if i[0]!="" and i[1]!="":                
                if i[1].isalpha()==True and i[0].isdigit()==True:
                    if yu==len(alltopro):
                        a5="Unique Entry"                        
                        return a5
                    else:
                        yu+=1
                elif i[1].isalpha()==True and i[0].lower() in ['lkg','ukg']==True:
                    if yu==len(alltopro):
                        a5="Unique Entry"                        
                        return a5
                    else:
                        yu+=1
                else:
                    a5="Invalid Entry"
                    return a5
            else:
               a5="All fields are mandatory"
               return a5                                                                    
    def cdchange(self):
        for i in range(self.tableView1.rowCount()):
            classtopro=self.tableView1.item(i, 7).text()       
            divisionpro=self.tableView1.item(i, 8).text()
            if classtopro!="" and divisionpro!="":
                    if head.cteacherautomation(classtopro.lower(),divisionpro.lower())==True:
                        global item1teach
                        item1teach=head.ctr                        
                    else:
                        pass
            else:
                pass
    def classviewing(self):
        for row_number,row_data in enumerate(retrieve.result10):
            self.tableView1.insertRow(row_number)
            for column_number,column_data in enumerate(row_data):
                if column_number!=2:
                    item1=str(column_data).upper()
                    #making readonly...................
                    item=QtWidgets.QTableWidgetItem(item1)
                    item.setFlags(QtCore.Qt.ItemIsEnabled)
                    #....................................
                    self.tableView1.setItem(row_number,column_number,QtWidgets.QTableWidgetItem(item))
                else:
                    global imagelabel
                    imagelabel=QtWidgets.QLabel(self.centralwidget)
                    imagelabel.setText("")
                    font = QtGui.QFont()
                    font.setFamily("Myriad Pro")
                    font.setPixelSize(18)
                    font.setBold(True)
                    font.setWeight(75)
                    imagelabel.setFont(font)
                    if column_data==b'PHOTO NOT AVAILABLE':
                        imagelabel.setStyleSheet("border: 2px solid black;")
                        pic="         PHOTO \n           NOT \n     AVAILABLE"
                        imagelabel.setText(pic)
                        item=imagelabel
                    else:
                        item=self.getimage(column_data)
                    self.tableView1.setCellWidget(row_number,column_number,item)
        self.tableView1.verticalHeader().setDefaultSectionSize(191)
        self.tableView1.horizontalHeader().setDefaultSectionSize(143)
        countc=self.tableView1.columnCount()
        for i in range(self.tableView1.rowCount()):
            item1="PROMOTE TO:"
            item=QtWidgets.QTableWidgetItem(item1)
            item.setFlags(QtCore.Qt.ItemIsEnabled)
            self.tableView1.setItem(i,6,QtWidgets.QTableWidgetItem(item))
            self.tableView1.item(i,6).setBackground(QtGui.QColor("#009900"))
            global item2
            item2=head.classabove
            self.classd.setText(item2.upper())
            item3=QtWidgets.QTableWidgetItem(item2)
            item3.setFlags(QtCore.Qt.ItemIsEnabled)
            self.tableView1.setItem(i,7,QtWidgets.QTableWidgetItem(item3))
            item4=""
            self.tableView1.setItem(i,8,QtWidgets.QTableWidgetItem(item4))
    def hiding(self):
        self.invalid_2.setGeometry(QtCore.QRect(600,640, 151, 20))
        self.invalid_2.setText("")
        self.submit.setVisible(True)
        self.submit1.setVisible(True)
        self.yes.setVisible(False)
        self.no.setVisible(False)
    def oncemore(self):
        self.invalid_2.setText("Are you sure?")
        self.invalid_2.setGeometry(QtCore.QRect(550,640, 151, 20))
        self.invalid_2.setStyleSheet("color: rgb(48, 127, 255);\n"
"color: rgb(39, 96, 255);\n"
"")
        self.yes.setVisible(True)
        self.no.setVisible(True)
        self.submit.setVisible(False)
        self.submit1.setVisible(False)
        self.yes.clicked.connect(self.forselectiontopromote)
        self.no.clicked.connect(self.hiding)
    def rollsorting(self,divisioncount):
        for f in range(len(divisioncount)):
            connection = mysql.connector.connect(host='localhost',user='admin',password='root',database='studentdirectory')
            cursor=connection.cursor()
            query="select admissionnumber from students where std='{}' and division='{}' order by name".format(item2,divisioncount[f])
            cursor.execute(query)
            rolling=cursor.fetchall()
            cursor.close()
            connection.close()
            forrolling=1
            for ring in range(len(rolling)):
                rrolling=rolling[ring]
                connection = mysql.connector.connect(host='localhost',user='admin',password='root',database='studentdirectory')
                cursor=connection.cursor()
                query="update students set roll={} where admissionnumber='{}'".format(forrolling,rrolling[0])
                cursor.execute(query)
                forrolling+=1
                connection.commit()
                cursor.close()
                connection.close()   
    def forselectiontopromote(self):
            self.yes.setVisible(False)
            self.no.setVisible(False)
            self.invalid_2.setGeometry(QtCore.QRect(600,640, 180, 20))
            self.invalid_2.setText("")
            if item2=="Eligible for higher studies":
                    self.deleteforpromote()
                    self.window=QtWidgets.QMainWindow()
                    self.ui=dialogpromo.Ui_dialogpromo()
                    self.ui.setupUi(self.window)
                    self.window.show()
                    self.promoteclass.hide()      
            if self.testtest()=="Unique Entry":
                try:
                    connection = mysql.connector.connect(host='localhost',user='admin',password='root',database='studentdirectory')
                    cursor = connection.cursor()
                    divcounting=[]
                    cx=1
                    for i in range(self.tableView1.rowCount()):
                        classtopro=self.tableView1.item(i, 7).text()
                        divisionpro=self.tableView1.item(i, 8).text()
                        
                        if head.cteacherautomation(classtopro.lower(),divisionpro.lower())==True:
                            item1teach=head.ctr
                            query="update students set std='{}',division='{}',roll={},classteacher='{}' where admissionnumber='{}'".format(str(classtopro.lower()),str(divisionpro.lower()),1,item1teach.lower(),retrieve.result11[i])
                            cursor.execute(query)
                            connection.commit()
                            cx+=1
                        else:
                            self.invalid_2.setStyleSheet("color:rgb(238, 0, 0)\n"
    "")
                            self.invalid_2.setText("Something went wrong")
                            self.submit.setVisible(True)
                            self.submit1.setVisible(True)
                        if divisionpro not in divcounting:
                            divcounting.append(divisionpro.lower())
                    if cx==self.tableView1.rowCount()+1:
                        self.rollsorting(divcounting)
                        cursor.close()
                        connection.close()
                        self.window=QtWidgets.QMainWindow()
                        self.ui=dialogpromo.Ui_dialogpromo()
                        self.ui.setupUi(self.window)
                        self.window.show()
                        self.promoteclass.hide()                        
                        self.invalid_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "color: rgb(21, 135, 13);\n"
        "")
                    
                except mysql.connector.Error  as e:
                    self.invalid_2.setStyleSheet("color:rgb(238, 0, 0)\n"
    "")
                    self.submit.setVisible(True)
                    self.invalid_2.setText("Invalid Entry")
                    cursor.close()
                    connection.close()
            elif self.testtest()=="Invalid Entry":
                self.submit.setVisible(True)
                self.invalid_2.setStyleSheet("color:rgb(238, 0, 0)\n"
    "")
                self.invalid_2.setText("Invalid Entry")

            elif self.testtest()=="All fields are mandatory":
                self.submit.setVisible(True)
                self.invalid_2.setStyleSheet("color:rgb(238, 0, 0)\n"
    "")
                self.invalid_2.setText("All fields are mandatory")

            
                
    def getimage(self,image):
        imagelabel.setScaledContents(True)
        pixmap=QtGui.QPixmap()
        picformatcheck=['png','jpg','jpeg']
        for i in range (0,len(picformatcheck)):
            pixmap.loadFromData(image,picformatcheck[i])
            imagelabel.setPixmap(pixmap)
            if pixmap.loadFromData(image,picformatcheck[i])==True:
                break
            i+=1
        return imagelabel
    def setupUi(self, promoteclass):
        self.promoteclass=promoteclass
        promoteclass.setObjectName("promoteclass")
        promoteclass.resize(1337, 739)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(promoteclass.sizePolicy().hasHeightForWidth())
        promoteclass.setSizePolicy(sizePolicy)
        promoteclass.setMinimumSize(QtCore.QSize(1337, 739))
        promoteclass.setMaximumSize(QtCore.QSize(1337, 739))
        self.centralwidget = QtWidgets.QWidget(promoteclass)
        self.centralwidget.setObjectName("centralwidget")
        global tableView1
        self.tableView1 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableView1.setGeometry(QtCore.QRect(10, 120, 1321, 501))
        self.tableView1.setStyleSheet("background:transparent;")
        self.tableView1.setEditTriggers(QtWidgets.QAbstractItemView.AllEditTriggers)
        self.tableView1.setTabKeyNavigation(True)
        self.tableView1.setProperty("showDropIndicator", False)
        self.tableView1.setDragDropOverwriteMode(False)
        self.tableView1.setObjectName("tableView1")
        self.tableView1.setColumnCount(9)
        self.tableView1.setRowCount(0)
        #items..........................................
        item = QtWidgets.QTableWidgetItem()
        self.tableView1.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableView1.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableView1.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableView1.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableView1.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableView1.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableView1.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableView1.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableView1.setHorizontalHeaderItem(8, item)
        #................................................
        #self.tableView1.installEventFilter(self)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1341, 711))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/newPrefix/ttt - Copy.jpg"))
        self.label.setObjectName("label")
        self.add = QtWidgets.QPushButton(self.centralwidget)
        self.add.setGeometry(QtCore.QRect(20, 20, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPixelSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.add.setFont(font)
        self.add.setAcceptDrops(False)
        self.add.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.add.setCheckable(False)
        self.add.setDefault(True)
        self.add.setFlat(True)
        self.add.setObjectName("add")
        self.add.setFocusPolicy(QtCore.Qt.NoFocus)
        self.classd = QtWidgets.QLabel(self.centralwidget)
        self.classd.setGeometry(QtCore.QRect(775, 65, 500, 51))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPixelSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.classd.setFont(font)
        self.classd.setText("")
        self.classd.setObjectName("classd")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(1270, 20, 47, 13))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPixelSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(1240, 10, 31, 31))
        self.label_5.setText("")
        self.label_5.setPixmap(QtGui.QPixmap(":/newPrefix/icon.png"))
        self.label_5.setObjectName("label_5")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(650, 70, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPixelSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.yes = QtWidgets.QPushButton(promoteclass)
        self.yes.setGeometry(QtCore.QRect(660, 640, 75, 23))
        self.yes.setAutoDefault(False)
        self.yes.setDefault(True)
        self.yes.setObjectName("yes")
        self.no = QtWidgets.QPushButton(promoteclass)
        self.no.setGeometry(QtCore.QRect(750, 640, 75, 23))
        self.no.setStyleSheet("")
        self.no.setAutoDefault(True)
        self.no.setDefault(False)
        self.no.setFlat(False)
        self.no.setObjectName("no")
        self.yes.setVisible(False)
        self.no.setVisible(False)
        self.submit = QtWidgets.QPushButton(self.centralwidget)
        self.submit.setGeometry(QtCore.QRect(1190, 640, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPixelSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.submit.setFont(font)
        self.submit.setAcceptDrops(False)
        self.submit.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.submit.setCheckable(False)
        self.submit.setDefault(True)
        self.submit.setFlat(True)
        self.submit.setObjectName("submit")
        self.submit1 = QtWidgets.QPushButton(self.centralwidget)
        self.submit1.setGeometry(QtCore.QRect(1030, 640, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPixelSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.submit1.setFont(font)
        self.submit1.setAcceptDrops(False)
        self.submit1.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.submit1.setCheckable(False)
        self.submit1.setDefault(True)
        self.submit1.setFlat(True)
        self.submit1.setObjectName("submit1")
        self.clear = QtWidgets.QPushButton(self.centralwidget)
        self.clear.setGeometry(QtCore.QRect(15, 640, 83, 23))
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        font.setPixelSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.clear.setFont(font)
        self.clear.setAcceptDrops(False)
        self.clear.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.clear.setCheckable(False)
        self.clear.setDefault(True)
        self.clear.setFlat(True)
        self.clear.setObjectName("clear")
        self.label.raise_()
        self.tableView1.raise_()
        self.add.raise_()
        self.classd.raise_()
        self.label_4.raise_()
        self.label_5.raise_()
        self.label_3.raise_()
        self.submit.raise_()
        self.submit1.raise_()
        self.clear.raise_()
        promoteclass.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(promoteclass)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1337, 21))
        self.menubar.setObjectName("menubar")
        promoteclass.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(promoteclass)
        self.statusbar.setObjectName("statusbar")
        promoteclass.setStatusBar(self.statusbar)        
        self.invalid_2 = QtWidgets.QLabel(self.centralwidget)
        self.invalid_2.setGeometry(QtCore.QRect(600,640, 180, 20))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPixelSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.invalid_2.setFont(font)
        self.invalid_2.setStyleSheet("color:rgb(238, 0, 0)\n"
"")
        self.invalid_2.setText("")
        self.invalid_2.setObjectName("invalid_2")
        self.classviewing()        
        self.clear.clicked.connect(self.clearing)
        self.tableView1.itemSelectionChanged.connect(self.cdchange)
        self.submit.clicked.connect(self.oncemore)
        self.retranslateUi(promoteclass)
        QtCore.QMetaObject.connectSlotsByName(promoteclass)
        promoteclass.setTabOrder(self.tableView1, self.add)
        promoteclass.setTabOrder(self.add,self.clear)
        promoteclass.setTabOrder(self.tableView1, self.submit)
        z=Ui_promoteclass(self.promoteclass)
        self.tableView1.setCurrentCell(0,8)
        self.tableView1.installEventFilter(z)
       
        self.tableView1.itemChanged.connect(self.inchange)
        self.submit1.clicked.connect(self.backing)#for back to window     
                
        

    def retranslateUi(self, promoteclass):
        _translate = QtCore.QCoreApplication.translate
        promoteclass.setWindowTitle(_translate("promoteclass", "Promote"))
        item = self.tableView1.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ADMN ID."))
        item = self.tableView1.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "NAME"))
        item = self.tableView1.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "PHOTO"))
        item = self.tableView1.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "CLASS"))
        item = self.tableView1.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "DIVISION"))
        item = self.tableView1.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "ROLL NO."))
        item = self.tableView1.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "PROMOTE"))
        item = self.tableView1.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "CLASS"))
        item = self.tableView1.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "DIVISION"))
        self.add.setText(_translate("promoteclass", "PROMOTE"))
        self.label_4.setText(_translate("promoteclass", "admin"))
        self.label_3.setText(_translate("promoteclass", "PROMOTE TO:"))
        self.submit.setText(_translate("promoteclass", "SUBMIT"))
        self.submit1.setText(_translate("promoteclass", "CANCEL"))
        self.yes.setText(_translate("promoteclass", "Yes"))
        self.no.setText(_translate("promoteclass", "No"))
        self.clear.setText(_translate("promoteclass", "Clear All"))
import pic


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    promoteclass = QtWidgets.QMainWindow()
    ui = Ui_promoteclass()
    ui.setupUi(promoteclass)
    promoteclass.show()
    sys.exit(app.exec_())
